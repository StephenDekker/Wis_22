import wis_2_2_utilities as util
import wis_2_2_systems as systems
#import random
import numpy as np

#set timestep
timestep = 2e-3




class controller():
    def __init__(self, target=0):
        self.matrix_gain = np.array([[-11.91502549, -3.94578615, -10.5995715, -2.00222643]])
        self.vector_fixed = np.array([0, 0, 0, 0])
        
    def feedBack(self, observe):  # Correcte inspringing
        u = -self.matrix_gain @ (observe - self.vector_fixed)
        return u

  

def main():
  model=systems.stacked_inverted_pendulum(num_pendulum = 2, high_kick = 2.0)
  control = controller()
  simulation = util.simulation(model=model,timestep=timestep)
  simulation.setCost()
  simulation.max_duration = 6 #seconde
  simulation.GIF_toggle = True #set to false to avoid frame and GIF creation

  while simulation.vis.Run():
      if simulation.time<simulation.max_duration:
        simulation.step()
        u = control.feedBack(simulation.observe())
        simulation.control(u)
        simulation.log()
        simulation.refreshTime()
        print("The cost is: ", simulation.cost_input)
      else:
        print('Ending visualisation...')
        simulation.vis.GetDevice().closeDevice()
      
        
  simulation.writeData()
  
if __name__ == '__main__':
    main()
