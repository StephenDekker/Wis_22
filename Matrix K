import numpy as np
from scipy.signal import place_poles

# Timestep instellen
timestep = 2e-3

# Parameters
d = 0.02  # Diameter of breedte
l = 0.6   # Lengte
rho = 700  # Dichtheid
m = rho * d * l * d  # Massa
g = 9.81

# Inertie berekeningen
Icm = (1 / 12) * rho * d**2 * l * (d**2 + l**2)
I = (1 / 12) * rho * d**4 * l + (1 / 3) * rho * d**2 * l**3

# Bereken matrices A en B
M1 = np.array([
    [1, 0, 0, 0],
    [0, (3 / 2) * m * l**2 + I, 0, (1 / 2) * m * l**2],
    [0, 0, 1, 0],
    [0, (3 / 4) * m * l**2 + Icm, 0, (1 / 4) * m * l**2 + Icm]
])

M2 = np.array([
    [0, 1, 0, 0],
    [(3 / 2) * m * g * l, 0, 0, 0],
    [0, 0, 0, 1],
    [(1 / 2) * m * g * l, 0, (1 / 2) * m * g * l, 0]
])

M3 = np.array([
    [0],
    [1],
    [0],
    [0]
])

# Controleer op singulariteit van M1
if np.linalg.det(M1) == 0:
    raise ValueError("Matrix M1 is singulier en kan niet ge√Ønverteerd worden.")

# Bereken A en B
A = np.linalg.inv(M1) @ M2
B = np.linalg.inv(M1) @ M3

# Pole-Placement Controller
class pp_controller:
    def __init__(self, A, B, desired_poles):
        # Controleer of het systeem controleerbaar is
        controllability = np.linalg.matrix_rank(np.hstack((B, A @ B, A @ A @ B, A @ A @ A @ B)))
        if controllability < A.shape[0]:
            raise ValueError("Het systeem is niet controleerbaar en pole placement is niet mogelijk.")

        # Bereken K met pole placement
        place_result = place_poles(A, B, desired_poles)
        self.matrix_gain = place_result.gain_matrix
        print("Gain matrix K berekend:")
        print(self.matrix_gain)

# Gewenste polen (voorbeeld)
desired_poles = [-3, -6, -9, -12]

# Maak een controller aan
try:
    controller = pp_controller(A, B, desired_poles)
except ValueError as e:
    print("Fout bij controller initialisatie:", e)
